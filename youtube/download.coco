"""
Download all the songs inside a YouTube playlist

- Add metadata (title, artist, lyrics, etc)
- Adjust gain
- Add artwork

"""
import sys
from pathlib import Path
from util import *

import settings

def main():
  playlist_url = if len(sys.argv) > 1 then sys.argv[1] else settings.YOUTUBE_PLAYLIST
  download_songs(playlist_url)
  generate_json()

def download_songs(url):
  """
  Download files from given YouTube URL.
  """
  if next(download_dir.glob('*.mp4'), None) is not None:
    print(f'{download_dir} already contains MP4 files, skip downloading')
    return

  run_process(
    'yt-dlp',
    '--write-thumbnail',
    '--write-info-json',
    '--sub-langs', 'all', '--write-subs',
    '--format', '[ext=mp4]',
    '--output', f'{download_dir}/%(title)s-%(id)s.%(ext)s',
    url,
  )

  # Nicely format the info.json files
  for info_file in download_dir.glob('*.info.json'):
    slurp_json(info_file) |> spit_json$(info_file)

  print(f'Files downloaded in {download_dir}')

def generate_json():
    """
    If youtube.json doesn't exist, read .info.json files from downloads directory and generate it
    """
    if json_file.exists():
      print(f'{json_file} already exists, skip generation')
      return

    get_info_objects() |> info_to_meta |> list |> spit_json$(json_file)
    print('\nGenerated youtube.json, edit it, and run `make process`')

def get_info_objects():
  for info_file in download_dir.glob('*.info.json') |> sorted$(key=(p) -> p.stat().st_mtime_ns):
    info = slurp_json(info_file)
    if info.get('_type') == 'playlist':
      continue
    info['path'] = info_file.parent / info_file.stem |> .with_suffix('.mp4') |> str
    yield info

def info_to_meta(info_objects):
  for info in info_objects:
    yield dict(
      title=info['title'],
      artist=info['channel'],
      channel=info['channel'],
      album='',
      genre='Pop',  # just a placeholder
      link=f"https://youtu.be/{info['id']}",
      path=info['path'],
      start=None,
      end=None,
    )

if __name__ == '__main__':
  main()
